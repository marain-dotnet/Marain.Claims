// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Claims.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ResourceAccessRule
    {
        /// <summary>
        /// Initializes a new instance of the ResourceAccessRule class.
        /// </summary>
        public ResourceAccessRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceAccessRule class.
        /// </summary>
        /// <param name="permission">Possible values include: 'deny',
        /// 'allow'</param>
        public ResourceAccessRule(string accessType, Resource resource, string permission)
        {
            AccessType = accessType;
            Resource = resource;
            Permission = permission;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accessType")]
        public string AccessType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "resource")]
        public Resource Resource { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'deny', 'allow'
        /// </summary>
        [JsonProperty(PropertyName = "permission")]
        public string Permission { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AccessType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccessType");
            }
            if (Resource == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Resource");
            }
            if (Permission == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Permission");
            }
            if (Resource != null)
            {
                Resource.Validate();
            }
        }
    }
}
