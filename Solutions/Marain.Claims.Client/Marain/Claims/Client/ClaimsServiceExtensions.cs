// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Claims.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ClaimsService.
    /// </summary>
    public static partial class ClaimsServiceExtensions
    {
            /// <summary>
            /// Create a Claim Permissions
            /// </summary>
            /// <remarks>
            /// Creates a permissions definition for a claim
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ClaimPermissionsWithGetExample CreateClaimPermissions(this IClaimsService operations, string xEndjinTenant, ClaimPermissionsWithPostExample body)
            {
                return operations.CreateClaimPermissionsAsync(xEndjinTenant, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Claim Permissions
            /// </summary>
            /// <remarks>
            /// Creates a permissions definition for a claim
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClaimPermissionsWithGetExample> CreateClaimPermissionsAsync(this IClaimsService operations, string xEndjinTenant, ClaimPermissionsWithPostExample body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateClaimPermissionsWithHttpMessagesAsync(xEndjinTenant, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a claim permissions
            /// </summary>
            /// <remarks>
            /// Gets a claim permissions by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            public static ClaimPermissionsWithGetExample GetClaimPermissions(this IClaimsService operations, string claimPermissionsId, string xEndjinTenant)
            {
                return operations.GetClaimPermissionsAsync(claimPermissionsId, xEndjinTenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a claim permissions
            /// </summary>
            /// <remarks>
            /// Gets a claim permissions by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClaimPermissionsWithGetExample> GetClaimPermissionsAsync(this IClaimsService operations, string claimPermissionsId, string xEndjinTenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClaimPermissionsWithHttpMessagesAsync(claimPermissionsId, xEndjinTenant, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all resource access rules for a claim permissions
            /// </summary>
            /// <remarks>
            /// Gets all resource access rules for a claim permissions, combining direct
            /// resource access rules and resource access rules from resource access rules
            /// sets
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            public static IList<ResourceAccessRule> GetClaimPermissionsResourceAccessRules(this IClaimsService operations, string claimPermissionsId, string xEndjinTenant)
            {
                return operations.GetClaimPermissionsResourceAccessRulesAsync(claimPermissionsId, xEndjinTenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all resource access rules for a claim permissions
            /// </summary>
            /// <remarks>
            /// Gets all resource access rules for a claim permissions, combining direct
            /// resource access rules and resource access rules from resource access rules
            /// sets
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ResourceAccessRule>> GetClaimPermissionsResourceAccessRulesAsync(this IClaimsService operations, string claimPermissionsId, string xEndjinTenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClaimPermissionsResourceAccessRulesWithHttpMessagesAsync(claimPermissionsId, xEndjinTenant, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds/removes resource access rules to/from a claim permissions
            /// </summary>
            /// <remarks>
            /// Adds/removes resource access rules to/from a claims permission by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='operation'>
            /// Possible values include: 'add', 'remove'
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails UpdateClaimPermissionsResourceAccessRules(this IClaimsService operations, string xEndjinTenant, string claimPermissionsId, string operation, IList<ResourceAccessRule> body)
            {
                return operations.UpdateClaimPermissionsResourceAccessRulesAsync(xEndjinTenant, claimPermissionsId, operation, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds/removes resource access rules to/from a claim permissions
            /// </summary>
            /// <remarks>
            /// Adds/removes resource access rules to/from a claims permission by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='operation'>
            /// Possible values include: 'add', 'remove'
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> UpdateClaimPermissionsResourceAccessRulesAsync(this IClaimsService operations, string xEndjinTenant, string claimPermissionsId, string operation, IList<ResourceAccessRule> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateClaimPermissionsResourceAccessRulesWithHttpMessagesAsync(xEndjinTenant, claimPermissionsId, operation, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set resource access rules for a claim permissions
            /// </summary>
            /// <remarks>
            /// Sets resource access rules for a claim permissions by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails SetClaimPermissionsResourceAccessRules(this IClaimsService operations, string xEndjinTenant, string claimPermissionsId, IList<ResourceAccessRule> body)
            {
                return operations.SetClaimPermissionsResourceAccessRulesAsync(xEndjinTenant, claimPermissionsId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set resource access rules for a claim permissions
            /// </summary>
            /// <remarks>
            /// Sets resource access rules for a claim permissions by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> SetClaimPermissionsResourceAccessRulesAsync(this IClaimsService operations, string xEndjinTenant, string claimPermissionsId, IList<ResourceAccessRule> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetClaimPermissionsResourceAccessRulesWithHttpMessagesAsync(xEndjinTenant, claimPermissionsId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds/removes resource access rule sets to/from a claim permissions
            /// </summary>
            /// <remarks>
            /// Adds/removes resource access rule sets to/from a claim permissions by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='operation'>
            /// Possible values include: 'add', 'remove'
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails UpdateClaimPermissionsResourceAccessRuleSets(this IClaimsService operations, string xEndjinTenant, string claimPermissionsId, string operation, IList<ResourceAccessRuleSetId> body)
            {
                return operations.UpdateClaimPermissionsResourceAccessRuleSetsAsync(xEndjinTenant, claimPermissionsId, operation, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds/removes resource access rule sets to/from a claim permissions
            /// </summary>
            /// <remarks>
            /// Adds/removes resource access rule sets to/from a claim permissions by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='operation'>
            /// Possible values include: 'add', 'remove'
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> UpdateClaimPermissionsResourceAccessRuleSetsAsync(this IClaimsService operations, string xEndjinTenant, string claimPermissionsId, string operation, IList<ResourceAccessRuleSetId> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateClaimPermissionsResourceAccessRuleSetsWithHttpMessagesAsync(xEndjinTenant, claimPermissionsId, operation, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set resource access rule sets for a claim permissions
            /// </summary>
            /// <remarks>
            /// Sets resource access rule sets for a claim permissions by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails SetClaimPermissionsResourceAccessRuleSets(this IClaimsService operations, string xEndjinTenant, string claimPermissionsId, IList<ResourceAccessRuleSetId> body)
            {
                return operations.SetClaimPermissionsResourceAccessRuleSetsAsync(xEndjinTenant, claimPermissionsId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set resource access rule sets for a claim permissions
            /// </summary>
            /// <remarks>
            /// Sets resource access rule sets for a claim permissions by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> SetClaimPermissionsResourceAccessRuleSetsAsync(this IClaimsService operations, string xEndjinTenant, string claimPermissionsId, IList<ResourceAccessRuleSetId> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetClaimPermissionsResourceAccessRuleSetsWithHttpMessagesAsync(xEndjinTenant, claimPermissionsId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a permission result for a claim permissions for a target resource and
            /// access type
            /// </summary>
            /// <remarks>
            /// Gets a permission result for a claim permissions for a target resource and
            /// access type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='resourceUri'>
            /// </param>
            /// <param name='accessType'>
            /// </param>
            public static object GetClaimPermissionsPermission(this IClaimsService operations, string claimPermissionsId, string xEndjinTenant, string resourceUri, string accessType)
            {
                return operations.GetClaimPermissionsPermissionAsync(claimPermissionsId, xEndjinTenant, resourceUri, accessType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a permission result for a claim permissions for a target resource and
            /// access type
            /// </summary>
            /// <remarks>
            /// Gets a permission result for a claim permissions for a target resource and
            /// access type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='claimPermissionsId'>
            /// An identifier uniquely associated with a claim permissions
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='resourceUri'>
            /// </param>
            /// <param name='accessType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetClaimPermissionsPermissionAsync(this IClaimsService operations, string claimPermissionsId, string xEndjinTenant, string resourceUri, string accessType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClaimPermissionsPermissionWithHttpMessagesAsync(claimPermissionsId, xEndjinTenant, resourceUri, accessType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets permission results for a set of target resources and access types
            /// </summary>
            /// <remarks>
            /// Gets permission results for a set of target resources and access types
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object GetClaimPermissionsPermissionBatch(this IClaimsService operations, string xEndjinTenant, IList<ClaimPermissionsBatchRequestItemWithPostExample> body)
            {
                return operations.GetClaimPermissionsPermissionBatchAsync(xEndjinTenant, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets permission results for a set of target resources and access types
            /// </summary>
            /// <remarks>
            /// Gets permission results for a set of target resources and access types
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetClaimPermissionsPermissionBatchAsync(this IClaimsService operations, string xEndjinTenant, IList<ClaimPermissionsBatchRequestItemWithPostExample> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClaimPermissionsPermissionBatchWithHttpMessagesAsync(xEndjinTenant, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a resource access rule set
            /// </summary>
            /// <remarks>
            /// Creates a resource access rule set
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateResourceAccessRuleSet(this IClaimsService operations, string xEndjinTenant, ResourceAccessRuleSetWithPostExample body)
            {
                return operations.CreateResourceAccessRuleSetAsync(xEndjinTenant, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a resource access rule set
            /// </summary>
            /// <remarks>
            /// Creates a resource access rule set
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateResourceAccessRuleSetAsync(this IClaimsService operations, string xEndjinTenant, ResourceAccessRuleSetWithPostExample body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateResourceAccessRuleSetWithHttpMessagesAsync(xEndjinTenant, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a resource access rule set
            /// </summary>
            /// <remarks>
            /// Gets a resource access rule set by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceAccessRuleSetId'>
            /// An identifier uniquely associated with a resource access rule set
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            public static ResourceAccessRuleSetWithGetExample GetResourceAccessRuleSet(this IClaimsService operations, string resourceAccessRuleSetId, string xEndjinTenant)
            {
                return operations.GetResourceAccessRuleSetAsync(resourceAccessRuleSetId, xEndjinTenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a resource access rule set
            /// </summary>
            /// <remarks>
            /// Gets a resource access rule set by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceAccessRuleSetId'>
            /// An identifier uniquely associated with a resource access rule set
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceAccessRuleSetWithGetExample> GetResourceAccessRuleSetAsync(this IClaimsService operations, string resourceAccessRuleSetId, string xEndjinTenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResourceAccessRuleSetWithHttpMessagesAsync(resourceAccessRuleSetId, xEndjinTenant, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds/removes resource access rules to/from a resource access rule set
            /// </summary>
            /// <remarks>
            /// Adds/removes resource access rules to/from a resource access rule set by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='resourceAccessRuleSetId'>
            /// An identifier uniquely associated with a resource access rule set
            /// </param>
            /// <param name='operation'>
            /// Possible values include: 'add', 'remove'
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails UpdateResourceAccessRuleSetResourceAccessRules(this IClaimsService operations, string xEndjinTenant, string resourceAccessRuleSetId, string operation, IList<ResourceAccessRule> body)
            {
                return operations.UpdateResourceAccessRuleSetResourceAccessRulesAsync(xEndjinTenant, resourceAccessRuleSetId, operation, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds/removes resource access rules to/from a resource access rule set
            /// </summary>
            /// <remarks>
            /// Adds/removes resource access rules to/from a resource access rule set by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='resourceAccessRuleSetId'>
            /// An identifier uniquely associated with a resource access rule set
            /// </param>
            /// <param name='operation'>
            /// Possible values include: 'add', 'remove'
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> UpdateResourceAccessRuleSetResourceAccessRulesAsync(this IClaimsService operations, string xEndjinTenant, string resourceAccessRuleSetId, string operation, IList<ResourceAccessRule> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateResourceAccessRuleSetResourceAccessRulesWithHttpMessagesAsync(xEndjinTenant, resourceAccessRuleSetId, operation, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set resource access rules for a resource access rule set
            /// </summary>
            /// <remarks>
            /// Sets resource access rules for a resource access rule set by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='resourceAccessRuleSetId'>
            /// An identifier uniquely associated with a resource access rule set
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails SetResourceAccessRuleSetResourceAccessRules(this IClaimsService operations, string xEndjinTenant, string resourceAccessRuleSetId, IList<ResourceAccessRule> body)
            {
                return operations.SetResourceAccessRuleSetResourceAccessRulesAsync(xEndjinTenant, resourceAccessRuleSetId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set resource access rules for a resource access rule set
            /// </summary>
            /// <remarks>
            /// Sets resource access rules for a resource access rule set by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='resourceAccessRuleSetId'>
            /// An identifier uniquely associated with a resource access rule set
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> SetResourceAccessRuleSetResourceAccessRulesAsync(this IClaimsService operations, string xEndjinTenant, string resourceAccessRuleSetId, IList<ResourceAccessRule> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetResourceAccessRuleSetResourceAccessRulesWithHttpMessagesAsync(xEndjinTenant, resourceAccessRuleSetId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set up the initial administrator permissions for a tenant
            /// </summary>
            /// <remarks>
            /// Creates a resource access rule set providing access to all endpoints and a
            /// Claim Permission granting that access to the specified role
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails InitializeTenant(this IClaimsService operations, string xEndjinTenant, Body body)
            {
                return operations.InitializeTenantAsync(xEndjinTenant, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set up the initial administrator permissions for a tenant
            /// </summary>
            /// <remarks>
            /// Creates a resource access rule set providing access to all endpoints and a
            /// Claim Permission granting that access to the specified role
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xEndjinTenant'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> InitializeTenantAsync(this IClaimsService operations, string xEndjinTenant, Body body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InitializeTenantWithHttpMessagesAsync(xEndjinTenant, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// View swagger definition for this API
            /// </summary>
            /// <remarks>
            /// View swagger definition for this API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSwagger(this IClaimsService operations)
            {
                return operations.GetSwaggerAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// View swagger definition for this API
            /// </summary>
            /// <remarks>
            /// View swagger definition for this API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSwaggerAsync(this IClaimsService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSwaggerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
