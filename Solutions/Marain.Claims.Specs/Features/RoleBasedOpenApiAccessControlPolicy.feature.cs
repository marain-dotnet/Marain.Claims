// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Marain.Operations.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RoleBasedOpenApiAccessControlPolicy")]
    public partial class RoleBasedOpenApiAccessControlPolicyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RoleBasedOpenApiAccessControlPolicy.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RoleBasedOpenApiAccessControlPolicy", "    In order to secure an OpenApi service\r\n    As a developer\r\n    I want to appl" +
                    "y application role-based security", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The client is unauthenticated")]
        public virtual void TheClientIsUnauthenticated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The client is unauthenticated", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
    testRunner.Given("I am not authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
    testRunner.Then("the result type should be \'NotAuthenticated\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
    testRunner.And("the policy should not have attempted to use the claims service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The client belongs to no roles")]
        public virtual void TheClientBelongsToNoRoles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The client belongs to no roles", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 13
    testRunner.Given("I have a ClaimsPrincipal with 0 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
    testRunner.Then("the result type should be \'NotAllowed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
    testRunner.And("the policy should not have attempted to use the claims service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The client belongs to one role")]
        [NUnit.Framework.TestCaseAttribute("", "/foo/bar", "GET", "foo/bar", null)]
        [NUnit.Framework.TestCaseAttribute("", "/baz/ick", "GET", "baz/ick", null)]
        [NUnit.Framework.TestCaseAttribute("", "/foo/bar", "PUT", "foo/bar", null)]
        [NUnit.Framework.TestCaseAttribute("testPrefix/", "/foo/bar", "GET", "testPrefix/foo/bar", null)]
        [NUnit.Framework.TestCaseAttribute("testPrefix/", "/foo/bar", "PUT", "testPrefix/foo/bar", null)]
        public virtual void TheClientBelongsToOneRole(string resourcePrefix, string path, string method, string resourceUri, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The client belongs to one role", null, exampleTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
    testRunner.Given("I have a ClaimsPrincipal with 1 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
    testRunner.And(string.Format("the policy has a resource prefix of \'{0}\'", resourcePrefix), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
    testRunner.When(string.Format("I invoke the policy with a path of \'{0}\' and a method of \'{1}\'", path, method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
    testRunner.Then("the policy should pass the claim permissions id for role 0 to the claims service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
    testRunner.And("the policy should pass the tenant id to the claims service in call for role 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
    testRunner.And(string.Format("the policy should pass a resource URI of \'{0}\' to the claims service in call for " +
                        "role 0", resourceUri), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
    testRunner.And(string.Format("the policy should pass an access type of \'{0}\' to the claims service in call for " +
                        "role 0", method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The client\'s only role grants it permission")]
        public virtual void TheClientsOnlyRoleGrantsItPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The client\'s only role grants it permission", null, ((string[])(null)));
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 36
    testRunner.Given("I have a ClaimsPrincipal with 1 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
    testRunner.And("the claims service returns \'allow\' for role 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
    testRunner.Then("the result should grant access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The client\'s only role denies it permission")]
        public virtual void TheClientsOnlyRoleDeniesItPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The client\'s only role denies it permission", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
    testRunner.Given("I have a ClaimsPrincipal with 1 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
    testRunner.And("the claims service returns \'deny\' for role 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
    testRunner.Then("the result type should be \'NotAllowed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The claims service doesn\'t recognize the role")]
        public virtual void TheClaimsServiceDoesntRecognizeTheRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The claims service doesn\'t recognize the role", null, ((string[])(null)));
#line 47
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 48
    testRunner.Given("I have a ClaimsPrincipal with 1 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
    testRunner.And("the claims service returns produces a 404 not found for role 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
    testRunner.Then("the result type should be \'NotAllowed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The client belongs to three roles")]
        public virtual void TheClientBelongsToThreeRoles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The client belongs to three roles", null, ((string[])(null)));
#line 53
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 54
    testRunner.Given("I have a ClaimsPrincipal with 3 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
    testRunner.When("I invoke the policy with a path of \'foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
    testRunner.Then("the policy should pass the claim permissions id for role 0 to the claims service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
    testRunner.And("the policy should pass a resource URI of \'foo/bar\' to the claims service in call " +
                    "for role 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
    testRunner.And("the policy should pass an access type of \'GET\' to the claims service in call for " +
                    "role 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
    testRunner.And("the policy should pass the claim permissions id for role 1 to the claims service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
    testRunner.And("the policy should pass a resource URI of \'foo/bar\' to the claims service in call " +
                    "for role 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
    testRunner.And("the policy should pass an access type of \'GET\' to the claims service in call for " +
                    "role 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
    testRunner.And("the policy should pass the claim permissions id for role 2 to the claims service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
    testRunner.And("the policy should pass a resource URI of \'foo/bar\' to the claims service in call " +
                    "for role 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
    testRunner.And("the policy should pass an access type of \'GET\' to the claims service in call for " +
                    "role 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All of the client\'s roles grant it permission")]
        public virtual void AllOfTheClientsRolesGrantItPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All of the client\'s roles grant it permission", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
    testRunner.Given("I have a ClaimsPrincipal with 3 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Result"});
            table8.AddRow(new string[] {
                        "0",
                        "allow"});
            table8.AddRow(new string[] {
                        "1",
                        "allow"});
            table8.AddRow(new string[] {
                        "2",
                        "allow"});
#line 69
 testRunner.And("the claims service returns the following results", ((string)(null)), table8, "And ");
#line 74
    testRunner.Then("the result should grant access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All of the client\'s roles deny it permission")]
        public virtual void AllOfTheClientsRolesDenyItPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All of the client\'s roles deny it permission", null, ((string[])(null)));
#line 76
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 77
    testRunner.Given("I have a ClaimsPrincipal with 3 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Result"});
            table9.AddRow(new string[] {
                        "0",
                        "deny"});
            table9.AddRow(new string[] {
                        "1",
                        "deny"});
            table9.AddRow(new string[] {
                        "2",
                        "deny"});
#line 79
 testRunner.And("the claims service returns the following results", ((string)(null)), table9, "And ");
#line 84
    testRunner.Then("the result type should be \'NotAllowed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One client role grants permission and the other two deny it in Allow If Any mode")]
        public virtual void OneClientRoleGrantsPermissionAndTheOtherTwoDenyItInAllowIfAnyMode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One client role grants permission and the other two deny it in Allow If Any mode", null, ((string[])(null)));
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 87
    testRunner.Given("I have a ClaimsPrincipal with 3 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Result"});
            table10.AddRow(new string[] {
                        "0",
                        "allow"});
            table10.AddRow(new string[] {
                        "1",
                        "deny"});
            table10.AddRow(new string[] {
                        "2",
                        "deny"});
#line 89
 testRunner.And("the claims service returns the following results", ((string)(null)), table10, "And ");
#line 94
    testRunner.Then("the result should grant access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two client roles grant permission and the other denies it in Allow If Any mode")]
        public virtual void TwoClientRolesGrantPermissionAndTheOtherDeniesItInAllowIfAnyMode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two client roles grant permission and the other denies it in Allow If Any mode", null, ((string[])(null)));
#line 96
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 97
    testRunner.Given("I have a ClaimsPrincipal with 3 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Result"});
            table11.AddRow(new string[] {
                        "0",
                        "allow"});
            table11.AddRow(new string[] {
                        "1",
                        "allow"});
            table11.AddRow(new string[] {
                        "2",
                        "deny"});
#line 99
 testRunner.And("the claims service returns the following results", ((string)(null)), table11, "And ");
#line 104
    testRunner.Then("the result should grant access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One client role grants permission and the other two deny it in All Only If All mo" +
            "de")]
        public virtual void OneClientRoleGrantsPermissionAndTheOtherTwoDenyItInAllOnlyIfAllMode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One client role grants permission and the other two deny it in All Only If All mo" +
                    "de", null, ((string[])(null)));
#line 106
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 107
    testRunner.Given("I have a ClaimsPrincipal with 3 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
    testRunner.And("the policy is configured in allow only if all mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Result"});
            table12.AddRow(new string[] {
                        "0",
                        "allow"});
            table12.AddRow(new string[] {
                        "1",
                        "deny"});
            table12.AddRow(new string[] {
                        "2",
                        "deny"});
#line 110
 testRunner.And("the claims service returns the following results", ((string)(null)), table12, "And ");
#line 115
    testRunner.Then("the result type should be \'NotAllowed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two client roles grant permission and the other denies it in All Only If All mode" +
            "")]
        public virtual void TwoClientRolesGrantPermissionAndTheOtherDeniesItInAllOnlyIfAllMode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two client roles grant permission and the other denies it in All Only If All mode" +
                    "", null, ((string[])(null)));
#line 117
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 118
    testRunner.Given("I have a ClaimsPrincipal with 3 roles claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
    testRunner.And("the policy is configured in allow only if all mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
    testRunner.When("I invoke the policy with a path of \'/foo/bar\' and a method of \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Result"});
            table13.AddRow(new string[] {
                        "0",
                        "allow"});
            table13.AddRow(new string[] {
                        "1",
                        "allow"});
            table13.AddRow(new string[] {
                        "2",
                        "deny"});
#line 121
 testRunner.And("the claims service returns the following results", ((string)(null)), table13, "And ");
#line 126
    testRunner.Then("the result type should be \'NotAllowed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
