// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Marain.Operations.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ResourceAccessRule")]
    public partial class ResourceAccessRuleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ResourceAccessRule.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ResourceAccessRule", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resource access rules with identical properties are equal")]
        public virtual void ResourceAccessRulesWithIdenticalPropertiesAreEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource access rules with identical properties are equal", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given("two resource access rules have identical properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When("the resource access rules are compared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then("the resource access rule comparison result should be true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resource access rules with differing access types are not equal")]
        public virtual void ResourceAccessRulesWithDifferingAccessTypesAreNotEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource access rules with differing access types are not equal", null, ((string[])(null)));
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given("two resource access rules have differing access types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("the resource access rules are compared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("the resource access rule comparison result should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resource access rules with differing resources are not equal")]
        public virtual void ResourceAccessRulesWithDifferingResourcesAreNotEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource access rules with differing resources are not equal", null, ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
 testRunner.Given("two resource access rules have differing resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("the resource access rules are compared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the resource access rule comparison result should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resource access rules with differing permissions are not equal")]
        public virtual void ResourceAccessRulesWithDifferingPermissionsAreNotEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource access rules with differing permissions are not equal", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
 testRunner.Given("two resource access rules have differing permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("the resource access rules are compared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("the resource access rule comparison result should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resource access rule matching without patterns")]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET", "Allow", "foo", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("FOO", "Foo", "get", "Allow", "foo", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET", "Allow", "FOO", "get", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET", "Deny", "foo", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET", "Allow", "bar", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET", "Allow", "foo", "PUT", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET", "Allow", "foo/bar", "PUT", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET", "Allow", "foo/bar", "GET/a", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo/bar", "Foo", "GET", "Allow", "foo", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET/a", "Allow", "foo", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("pages/home", "Home page", "Edit", "Allow", "pages/home", "Edit", "true", null)]
        [NUnit.Framework.TestCaseAttribute("pages/home", "Home page", "Read", "Allow", "pages/home", "Edit", "false", null)]
        [NUnit.Framework.TestCaseAttribute("pages/home", "Home page", "Read", "Allow", "pages/admin", "Read", "false", null)]
        public virtual void ResourceAccessRuleMatchingWithoutPatterns(string resourceName, string resourceDisplayName, string accessType, string permission, string targetResourceName, string targetAccessType, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource access rule matching without patterns", null, exampleTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 24
 testRunner.Given(string.Format("I have a resource access rule for a resource with name \'{0}\' and display name \'{1" +
                        "}\', with an access type \'{2}\', and permission \'{3}\'", resourceName, resourceDisplayName, accessType, permission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.When(string.Format("I check if the resource access rule is a match for a target with resource name \'{" +
                        "0}\' and target \'{1}\'", targetResourceName, targetAccessType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then(string.Format("the match result should be \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resource access rule matching with access type patterns")]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "*", "Allow", "foo", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "*", "Allow", "foo", "GET/a", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "**", "Allow", "foo", "GET/a", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET/*", "Allow", "foo", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET/*", "Allow", "foo", "GET/a", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET/*", "Allow", "foo", "GET/a/b", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo", "Foo", "GET/**", "Allow", "foo", "GET/a/b", "true", null)]
        [NUnit.Framework.TestCaseAttribute("books/**", "All books", "Read", "Allow", "books/1984", "Read", "true", null)]
        [NUnit.Framework.TestCaseAttribute("books/**", "All books", "Read", "Allow", "books/1984", "Update", "false", null)]
        [NUnit.Framework.TestCaseAttribute("books/**", "All books", "**", "Allow", "books/1984", "Update", "true", null)]
        public virtual void ResourceAccessRuleMatchingWithAccessTypePatterns(string resourceName, string resourceDisplayName, string accessType, string permission, string targetResourceName, string targetAccessType, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource access rule matching with access type patterns", null, exampleTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 46
 testRunner.Given(string.Format("I have a resource access rule for a resource with name \'{0}\' and display name \'{1" +
                        "}\', with an access type \'{2}\', and permission \'{3}\'", resourceName, resourceDisplayName, accessType, permission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.When(string.Format("I check if the resource access rule is a match for a target with resource name \'{" +
                        "0}\' and target \'{1}\'", targetResourceName, targetAccessType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then(string.Format("the match result should be \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resource access rule matching with resource name patterns")]
        [NUnit.Framework.TestCaseAttribute("*", "All", "GET", "Allow", "foo", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("*", "All", "GET", "Allow", "foo/bar", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("**", "All", "GET", "Allow", "foo/bar", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo/*", "All", "GET", "Allow", "foo", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo/*", "All", "GET", "Allow", "foo/bar", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo/*", "All", "GET", "Allow", "foo/bar/baz", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo/**", "All", "GET", "Allow", "foo/bar/baz", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo/*/quux", "All", "GET", "Allow", "foo/bar/quux", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo/*/quux", "All", "GET", "Allow", "foo/123/quux", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("foo/*/quux", "All", "GET", "Allow", "foo/quux", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("foo/*/quux", "All", "GET", "Allow", "foo/123/baz", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("aul/api/cases/*/quotes/*/underwriting", "All", "GET", "Allow", "foo/123/baz", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("aul/api/cases/*/quotes/*/underwriting", "All", "GET", "Allow", "aul/api/cases/1/quotes/2/underwriting", "GET", "true", null)]
        [NUnit.Framework.TestCaseAttribute("aul/api/cases/*/quotes/*/binding-quote-*/actuarial-review/*", "All", "GET", "Allow", "aul/api/cases/1/quotes/2/underwriting", "GET", "false", null)]
        [NUnit.Framework.TestCaseAttribute("aul/api/cases/*/quotes/*/binding-quote-*/actuarial-review/*", "All", "GET", "Allow", "aul/api/cases/1/quotes/2/binding-quote-v1/actuarial-review/something", "GET", "true", null)]
        public virtual void ResourceAccessRuleMatchingWithResourceNamePatterns(string resourceName, string resourceDisplayName, string accessType, string permission, string targetResourceName, string targetAccessType, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource access rule matching with resource name patterns", null, exampleTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 65
 testRunner.Given(string.Format("I have a resource access rule for a resource with name \'{0}\' and display name \'{1" +
                        "}\', with an access type \'{2}\', and permission \'{3}\'", resourceName, resourceDisplayName, accessType, permission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.When(string.Format("I check if the resource access rule is a match for a target with resource name \'{" +
                        "0}\' and target \'{1}\'", targetResourceName, targetAccessType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then(string.Format("the match result should be \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
