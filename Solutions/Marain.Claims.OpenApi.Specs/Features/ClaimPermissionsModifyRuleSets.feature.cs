// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Marain.Claims.OpenApi.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ClaimPermissionsModifyRuleSets")]
    [NUnit.Framework.CategoryAttribute("perFeatureContainer")]
    [NUnit.Framework.CategoryAttribute("useClaimsApi")]
    public partial class ClaimPermissionsModifyRuleSetsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "perFeatureContainer",
                "useClaimsApi"};
        
#line 1 "ClaimPermissionsModifyRuleSets.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ClaimPermissionsModifyRuleSets", "    Service endpoints for modifying the rule sets of claim permissions", ProgrammingLanguage.CSharp, new string[] {
                        "perFeatureContainer",
                        "useClaimsApi"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
    testRunner.Given("a unique ClaimsPermission id named \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.And("a new ClaimsPermission with id named \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing ClaimPermissions that was empty when first fetched but has since had" +
            " rulesets added")]
        public virtual void GetExistingClaimPermissionsThatWasEmptyWhenFirstFetchedButHasSinceHadRulesetsAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing ClaimPermissions that was empty when first fetched but has since had" +
                    " rulesets added", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 12
    testRunner.Given("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table41.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table41.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table41.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 13
    testRunner.And("an existing ruleset with id \'rs1\' named \'Ruleset 1\' and these rules", ((string)(null)), table41, "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table42.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table42.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
#line 18
    testRunner.And("an existing ruleset with id \'rs2\' named \'Ruleset 2\' and these rules", ((string)(null)), table42, "And ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table43.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 22
    testRunner.And("an existing ruleset with id \'rs3\' named \'Ruleset 3\' and these rules", ((string)(null)), table43, "And ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table44.AddRow(new string[] {
                            "rs1"});
                table44.AddRow(new string[] {
                            "rs2"});
                table44.AddRow(new string[] {
                            "rs3"});
#line 25
    testRunner.And("the ClaimsPermission with id \'id1\' is updated via the updateClaimPermissionsResou" +
                        "rceAccessRuleSets endpoint to add rulesets with these ids", ((string)(null)), table44, "And ");
#line hidden
#line 30
    testRunner.When("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
    testRunner.Then("the HTTP status returned by the Claims service is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
    testRunner.And("the ClaimPermissions returned by the Claims service\'s id matches \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
#line 33
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these defined rul" +
                        "es", ((string)(null)), table45, "And ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table46.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table46.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table46.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 35
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs1\' n" +
                        "amed \'Ruleset 1\' with these rules", ((string)(null)), table46, "And ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table47.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table47.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
#line 40
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs2\' n" +
                        "amed \'Ruleset 2\' with these rules", ((string)(null)), table47, "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table48.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 44
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs3\' n" +
                        "amed \'Ruleset 3\' with these rules", ((string)(null)), table48, "And ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table49.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table49.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table49.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
                table49.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table49.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
                table49.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 47
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these effective r" +
                        "ules", ((string)(null)), table49, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing ClaimPermissions that was created with rulesets and since the first " +
            "fetch, the ClaimPermissions has not changed but the rulesets have")]
        public virtual void GetExistingClaimPermissionsThatWasCreatedWithRulesetsAndSinceTheFirstFetchTheClaimPermissionsHasNotChangedButTheRulesetsHave()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing ClaimPermissions that was created with rulesets and since the first " +
                    "fetch, the ClaimPermissions has not changed but the rulesets have", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table50.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table50.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table50.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 57
    testRunner.Given("an existing ruleset with id \'rs11\' named \'Ruleset 1\' and these rules", ((string)(null)), table50, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table51.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table51.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
#line 62
    testRunner.And("an existing ruleset with id \'rs12\' named \'Ruleset 2\' and these rules", ((string)(null)), table51, "And ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table52.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 66
    testRunner.And("an existing ruleset with id \'rs13\' named \'Ruleset 3\' and these rules", ((string)(null)), table52, "And ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table53.AddRow(new string[] {
                            "rs11"});
                table53.AddRow(new string[] {
                            "rs12"});
                table53.AddRow(new string[] {
                            "rs13"});
#line 69
    testRunner.And("the new ClaimsPermission has these ruleset IDs", ((string)(null)), table53, "And ");
#line hidden
#line 74
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table54.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table54.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 75
    testRunner.And("these rules are added to the existing ruleset with id \'rs11\'", ((string)(null)), table54, "And ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table55.AddRow(new string[] {
                            "PATCH",
                            "r2c",
                            "R2c",
                            "Allow"});
#line 79
    testRunner.And("these rules are added to the existing ruleset with id \'rs12\'", ((string)(null)), table55, "And ");
#line hidden
#line 82
    testRunner.When("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
    testRunner.Then("the HTTP status returned by the Claims service is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("the ClaimPermissions returned by the Claims service\'s id matches \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
#line 85
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these defined rul" +
                        "es", ((string)(null)), table56, "And ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table57.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table57.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table57.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
                table57.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table57.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 87
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs11\' " +
                        "named \'Ruleset 1\' with these rules", ((string)(null)), table57, "And ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table58.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table58.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
                table58.AddRow(new string[] {
                            "PATCH",
                            "r2c",
                            "R2c",
                            "Allow"});
#line 94
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs12\' " +
                        "named \'Ruleset 2\' with these rules", ((string)(null)), table58, "And ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table59.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 99
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs13\' " +
                        "named \'Ruleset 3\' with these rules", ((string)(null)), table59, "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table60.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table60.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table60.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
                table60.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table60.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
                table60.AddRow(new string[] {
                            "PATCH",
                            "r2c",
                            "R2c",
                            "Allow"});
                table60.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 102
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these effective r" +
                        "ules", ((string)(null)), table60, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing ClaimPermissions that was created with rulesets but has since had ru" +
            "lesets removed")]
        public virtual void GetExistingClaimPermissionsThatWasCreatedWithRulesetsButHasSinceHadRulesetsRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing ClaimPermissions that was created with rulesets but has since had ru" +
                    "lesets removed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table61.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table61.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table61.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 113
    testRunner.Given("an existing ruleset with id \'rs21\' named \'Ruleset 1\' and these rules", ((string)(null)), table61, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table62.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table62.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
#line 118
    testRunner.And("an existing ruleset with id \'rs22\' named \'Ruleset 2\' and these rules", ((string)(null)), table62, "And ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table63.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 122
    testRunner.And("an existing ruleset with id \'rs23\' named \'Ruleset 3\' and these rules", ((string)(null)), table63, "And ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table64.AddRow(new string[] {
                            "rs21"});
                table64.AddRow(new string[] {
                            "rs22"});
                table64.AddRow(new string[] {
                            "rs23"});
#line 125
    testRunner.And("the new ClaimsPermission has these ruleset IDs", ((string)(null)), table64, "And ");
#line hidden
#line 130
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table65.AddRow(new string[] {
                            "rs21"});
                table65.AddRow(new string[] {
                            "rs23"});
#line 131
    testRunner.And("the ClaimsPermission with id \'id1\' is updated via the updateClaimPermissionsResou" +
                        "rceAccessRuleSets endpoint to remove rulesets with these ids", ((string)(null)), table65, "And ");
#line hidden
#line 135
    testRunner.When("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
    testRunner.Then("the HTTP status returned by the Claims service is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
    testRunner.And("the ClaimPermissions returned by the Claims service\'s id matches \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
#line 138
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these defined rul" +
                        "es", ((string)(null)), table66, "And ");
#line hidden
#line 140
    testRunner.And("the ClaimPermissions returned by the Claims service has 1 ruleset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table67.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table67.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
#line 141
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs22\' " +
                        "named \'Ruleset 2\' with these rules", ((string)(null)), table67, "And ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table68.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table68.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
#line 145
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these effective r" +
                        "ules", ((string)(null)), table68, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing ClaimPermissions that was created with rulesets but has since had ru" +
            "lesets replaced wholesale")]
        public virtual void GetExistingClaimPermissionsThatWasCreatedWithRulesetsButHasSinceHadRulesetsReplacedWholesale()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing ClaimPermissions that was created with rulesets but has since had ru" +
                    "lesets replaced wholesale", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table69.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table69.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table69.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 151
    testRunner.Given("an existing ruleset with id \'rs31\' named \'Ruleset 1\' and these rules", ((string)(null)), table69, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table70.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table70.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
#line 156
    testRunner.And("an existing ruleset with id \'rs32\' named \'Ruleset 2\' and these rules", ((string)(null)), table70, "And ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table71.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 160
    testRunner.And("an existing ruleset with id \'rs33\' named \'Ruleset 3\' and these rules", ((string)(null)), table71, "And ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table72.AddRow(new string[] {
                            "POST",
                            "r4a",
                            "R4a",
                            "Allow"});
                table72.AddRow(new string[] {
                            "DELETE",
                            "r4a",
                            "R4a",
                            "Allow"});
#line 163
    testRunner.And("an existing ruleset with id \'rs34\' named \'Ruleset 4\' and these rules", ((string)(null)), table72, "And ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table73.AddRow(new string[] {
                            "rs31"});
                table73.AddRow(new string[] {
                            "rs33"});
#line 167
    testRunner.And("the new ClaimsPermission has these ruleset IDs", ((string)(null)), table73, "And ");
#line hidden
#line 171
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table74.AddRow(new string[] {
                            "rs32"});
                table74.AddRow(new string[] {
                            "rs33"});
                table74.AddRow(new string[] {
                            "rs34"});
#line 172
    testRunner.And("these ruleset IDs are POSTed to the setClaimPermissionsResourceAccessRuleSets end" +
                        "point for the ClaimsPermission with id named \'id1\'", ((string)(null)), table74, "And ");
#line hidden
#line 177
    testRunner.When("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
    testRunner.Then("the HTTP status returned by the Claims service is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 179
    testRunner.And("the ClaimPermissions returned by the Claims service\'s id matches \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
#line 180
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these defined rul" +
                        "es", ((string)(null)), table75, "And ");
#line hidden
#line 182
    testRunner.And("the ClaimPermissions returned by the Claims service has 3 rulesets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table76.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table76.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
#line 183
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs32\' " +
                        "named \'Ruleset 2\' with these rules", ((string)(null)), table76, "And ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table77.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
#line 187
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs33\' " +
                        "named \'Ruleset 3\' with these rules", ((string)(null)), table77, "And ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table78.AddRow(new string[] {
                            "POST",
                            "r4a",
                            "R4a",
                            "Allow"});
                table78.AddRow(new string[] {
                            "DELETE",
                            "r4a",
                            "R4a",
                            "Allow"});
#line 190
    testRunner.And("the ClaimPermissions returned by the Claims service has a ruleset with id \'rs34\' " +
                        "named \'Ruleset 4\' with these rules", ((string)(null)), table78, "And ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table79.AddRow(new string[] {
                            "GET",
                            "r2a",
                            "R2a",
                            "Allow"});
                table79.AddRow(new string[] {
                            "GET",
                            "r2b",
                            "R2b",
                            "Allow"});
                table79.AddRow(new string[] {
                            "PATCH",
                            "r2a",
                            "R2a",
                            "Allow"});
                table79.AddRow(new string[] {
                            "POST",
                            "r4a",
                            "R4a",
                            "Allow"});
                table79.AddRow(new string[] {
                            "DELETE",
                            "r4a",
                            "R4a",
                            "Allow"});
#line 194
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these effective r" +
                        "ules", ((string)(null)), table79, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Existing ClaimPermissions updated to add non-existent rulesets")]
        public virtual void ExistingClaimPermissionsUpdatedToAddNon_ExistentRulesets()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Existing ClaimPermissions updated to add non-existent rulesets", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 202
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 203
    testRunner.Given("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table80.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table80.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table80.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 204
    testRunner.And("an existing ruleset with id \'rs41\' named \'Ruleset 1\' and these rules", ((string)(null)), table80, "And ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table81.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table81.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table81.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 209
    testRunner.And("an existing ruleset with id \'rs41\' named \'Ruleset 1\' and these rules", ((string)(null)), table81, "And ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table82.AddRow(new string[] {
                            "rs42"});
#line 214
    testRunner.When("the ClaimsPermission with id \'id1\' is updated via the updateClaimPermissionsResou" +
                        "rceAccessRuleSets endpoint to add rulesets with these ids", ((string)(null)), table82, "When ");
#line hidden
#line 217
    testRunner.Then("the HTTP status returned by the Claims service is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Existing ClaimPermissions rulesets replaced wholesale with set including non-exis" +
            "tent rulesets")]
        public virtual void ExistingClaimPermissionsRulesetsReplacedWholesaleWithSetIncludingNon_ExistentRulesets()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Existing ClaimPermissions rulesets replaced wholesale with set including non-exis" +
                    "tent rulesets", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 219
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 220
    testRunner.Given("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table83.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table83.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table83.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 221
    testRunner.And("an existing ruleset with id \'rs51\' named \'Ruleset 1\' and these rules", ((string)(null)), table83, "And ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table84.AddRow(new string[] {
                            "rs51"});
#line 226
    testRunner.And("the ClaimsPermission with id \'id1\' is updated via the updateClaimPermissionsResou" +
                        "rceAccessRuleSets endpoint to add rulesets with these ids", ((string)(null)), table84, "And ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table85.AddRow(new string[] {
                            "rs51"});
                table85.AddRow(new string[] {
                            "rs52"});
#line 229
    testRunner.When("these ruleset IDs are POSTed to the setClaimPermissionsResourceAccessRuleSets end" +
                        "point for the ClaimsPermission with id named \'id1\'", ((string)(null)), table85, "When ");
#line hidden
#line 233
    testRunner.Then("the HTTP status returned by the Claims service is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Existing ClaimPermissions updated to remove rule it doesn\'t have")]
        public virtual void ExistingClaimPermissionsUpdatedToRemoveRuleItDoesntHave()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Existing ClaimPermissions updated to remove rule it doesn\'t have", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 235
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table86.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table86.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table86.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 236
    testRunner.Given("an existing ruleset with id \'rs61\' named \'Ruleset 1\' and these rules", ((string)(null)), table86, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table87.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table87.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table87.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 241
    testRunner.And("an existing ruleset with id \'rs62\' named \'Ruleset 2\' and these rules", ((string)(null)), table87, "And ");
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table88.AddRow(new string[] {
                            "rs61"});
#line 246
    testRunner.And("the new ClaimsPermission has these ruleset IDs", ((string)(null)), table88, "And ");
#line hidden
#line 249
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID"});
                table89.AddRow(new string[] {
                            "rs61"});
                table89.AddRow(new string[] {
                            "rs62"});
#line 250
    testRunner.When("the ClaimsPermission with id \'id1\' is updated via the updateClaimPermissionsResou" +
                        "rceAccessRuleSets endpoint to remove rulesets with these ids", ((string)(null)), table89, "When ");
#line hidden
#line 254
    testRunner.Then("the HTTP status returned by the Claims service is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
