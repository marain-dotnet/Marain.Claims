// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Marain.Claims.OpenApi.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ClaimPermissionsModifyRules")]
    [NUnit.Framework.CategoryAttribute("perFeatureContainer")]
    [NUnit.Framework.CategoryAttribute("useClaimsApi")]
    public partial class ClaimPermissionsModifyRulesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "perFeatureContainer",
                "useClaimsApi"};
        
#line 1 "ClaimPermissionsModifyRules.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ClaimPermissionsModifyRules", "    Service endpoints for modifying the rules of claim permissions", ProgrammingLanguage.CSharp, new string[] {
                        "perFeatureContainer",
                        "useClaimsApi"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
    testRunner.Given("a unique ClaimsPermission id named \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.And("a new ClaimsPermission with id named \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing ClaimPermissions that was empty when first fetched but has since had" +
            " rules added")]
        public virtual void GetExistingClaimPermissionsThatWasEmptyWhenFirstFetchedButHasSinceHadRulesAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing ClaimPermissions that was empty when first fetched but has since had" +
                    " rules added", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 12
    testRunner.Given("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
    testRunner.And("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table15.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table15.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table15.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 14
    testRunner.And("these rules are added via the updateClaimPermissionsResourceAccessRules endpoint " +
                        "for the ClaimsPermission with id named \'id1\'", ((string)(null)), table15, "And ");
#line hidden
#line 19
    testRunner.When("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then("the HTTP status returned by the Claims service is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.And("the ClaimPermissions returned by the Claims service\'s id matches \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table16.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table16.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table16.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 22
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these defined rul" +
                        "es", ((string)(null)), table16, "And ");
#line hidden
#line 27
    testRunner.And("the ClaimPermissions returned by the Claims service has no rulesets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table17.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table17.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table17.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 28
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these effective r" +
                        "ules", ((string)(null)), table17, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing ClaimPermissions that was created with rules but has since had rules" +
            " removed")]
        public virtual void GetExistingClaimPermissionsThatWasCreatedWithRulesButHasSinceHadRulesRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing ClaimPermissions that was created with rules but has since had rules" +
                    " removed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table18.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table18.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table18.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 35
    testRunner.Given("the new ClaimsPermission has these rules", ((string)(null)), table18, "Given ");
#line hidden
#line 40
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
    testRunner.And("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table19.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table19.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "Same resource different name",
                            "Deny"});
#line 42
    testRunner.And("these rules are removed via the updateClaimPermissionsResourceAccessRules endpoin" +
                        "t for the ClaimsPermission with id named \'id1\'", ((string)(null)), table19, "And ");
#line hidden
#line 46
    testRunner.When("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
    testRunner.Then("the HTTP status returned by the Claims service is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
    testRunner.And("the ClaimPermissions returned by the Claims service\'s id matches \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table20.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 49
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these defined rul" +
                        "es", ((string)(null)), table20, "And ");
#line hidden
#line 52
    testRunner.And("the ClaimPermissions returned by the Claims service has no rulesets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table21.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 53
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these effective r" +
                        "ules", ((string)(null)), table21, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing ClaimPermissions that was created with rules and has since had more " +
            "rules added")]
        public virtual void GetExistingClaimPermissionsThatWasCreatedWithRulesAndHasSinceHadMoreRulesAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing ClaimPermissions that was created with rules and has since had more " +
                    "rules added", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table22.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table22.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
#line 58
    testRunner.Given("the new ClaimsPermission has these rules", ((string)(null)), table22, "Given ");
#line hidden
#line 62
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table23.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
                table23.AddRow(new string[] {
                            "DELETE",
                            "r1b",
                            "R1b",
                            "Deny"});
#line 64
    testRunner.And("these rules are added via the updateClaimPermissionsResourceAccessRules endpoint " +
                        "for the ClaimsPermission with id named \'id1\'", ((string)(null)), table23, "And ");
#line hidden
#line 68
    testRunner.When("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
    testRunner.Then("the HTTP status returned by the Claims service is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.And("the ClaimPermissions returned by the Claims service\'s id matches \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table24.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
                table24.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table24.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
                table24.AddRow(new string[] {
                            "DELETE",
                            "r1b",
                            "R1b",
                            "Deny"});
#line 71
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these defined rul" +
                        "es", ((string)(null)), table24, "And ");
#line hidden
#line 77
    testRunner.And("the ClaimPermissions returned by the Claims service has no rulesets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table25.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
                table25.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table25.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
                table25.AddRow(new string[] {
                            "DELETE",
                            "r1b",
                            "R1b",
                            "Deny"});
#line 78
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these effective r" +
                        "ules", ((string)(null)), table25, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing ClaimPermissions that was created with rules but has since had rules" +
            " replaced wholesale")]
        public virtual void GetExistingClaimPermissionsThatWasCreatedWithRulesButHasSinceHadRulesReplacedWholesale()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing ClaimPermissions that was created with rules but has since had rules" +
                    " replaced wholesale", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table26.AddRow(new string[] {
                            "GET",
                            "foo",
                            "Foo",
                            "Allow"});
                table26.AddRow(new string[] {
                            "POST",
                            "foo",
                            "Foo",
                            "Deny"});
                table26.AddRow(new string[] {
                            "GET",
                            "bar",
                            "Bar",
                            "Allow"});
#line 86
    testRunner.Given("the new ClaimsPermission has these rules", ((string)(null)), table26, "Given ");
#line hidden
#line 91
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.And("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table27.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table27.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table27.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 93
    testRunner.And("these rules are POSTed to the setClaimPermissionsResourceAccessRules endpoint for" +
                        " the ClaimsPermission with id named \'id1\'", ((string)(null)), table27, "And ");
#line hidden
#line 98
    testRunner.When("ClaimsPermission with id named \'id1\' is fetched from the getClaimPermissions endp" +
                        "oint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
    testRunner.Then("the HTTP status returned by the Claims service is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
    testRunner.And("the ClaimPermissions returned by the Claims service\'s id matches \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table28.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table28.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table28.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 101
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these defined rul" +
                        "es", ((string)(null)), table28, "And ");
#line hidden
#line 106
    testRunner.And("the ClaimPermissions returned by the Claims service has no rulesets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table29.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table29.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table29.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 107
    testRunner.And("the ClaimPermissions returned by the Claims service has exactly these effective r" +
                        "ules", ((string)(null)), table29, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Existing ClaimPermissions updated to add rule it already has")]
        [NUnit.Framework.TestCaseAttribute("GET", "r1a", "R1a", "Allow", null)]
        [NUnit.Framework.TestCaseAttribute("POST", "r1a", "R1a", "Deny", null)]
        [NUnit.Framework.TestCaseAttribute("GET", "r1b", "R1b", "Allow", null)]
        [NUnit.Framework.TestCaseAttribute("GET", "r1b", "Same resource different name", "Allow", null)]
        public virtual void ExistingClaimPermissionsUpdatedToAddRuleItAlreadyHas(string accessType, string resourceUri, string resourceName, string permission, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AccessType", accessType);
            argumentsOfScenario.Add("ResourceUri", resourceUri);
            argumentsOfScenario.Add("ResourceName", resourceName);
            argumentsOfScenario.Add("Permission", permission);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Existing ClaimPermissions updated to add rule it already has", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table30.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table30.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table30.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 114
    testRunner.Given("the new ClaimsPermission has these rules", ((string)(null)), table30, "Given ");
#line hidden
#line 119
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table31.AddRow(new string[] {
                            string.Format("{0}", accessType),
                            string.Format("{0}", resourceUri),
                            string.Format("{0}", resourceName),
                            string.Format("{0}", permission)});
#line 120
    testRunner.When("these rules are added via the updateClaimPermissionsResourceAccessRules endpoint " +
                        "for the ClaimsPermission with id named \'id1\'", ((string)(null)), table31, "When ");
#line hidden
#line 123
    testRunner.Then("the HTTP status returned by the Claims service is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Existing ClaimPermissions updated to remove rule it doesn\'t have")]
        [NUnit.Framework.TestCaseAttribute("GET", "r2a", "R1a", "Allow", null)]
        [NUnit.Framework.TestCaseAttribute("GET", "r1a", "R1a", "Deny", null)]
        [NUnit.Framework.TestCaseAttribute("GET", "r1a", "Resource name not relevant", "Deny", null)]
        public virtual void ExistingClaimPermissionsUpdatedToRemoveRuleItDoesntHave(string accessType, string resourceUri, string resourceName, string permission, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AccessType", accessType);
            argumentsOfScenario.Add("ResourceUri", resourceUri);
            argumentsOfScenario.Add("ResourceName", resourceName);
            argumentsOfScenario.Add("Permission", permission);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Existing ClaimPermissions updated to remove rule it doesn\'t have", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table32.AddRow(new string[] {
                            "GET",
                            "r1a",
                            "R1a",
                            "Allow"});
                table32.AddRow(new string[] {
                            "POST",
                            "r1a",
                            "R1a",
                            "Deny"});
                table32.AddRow(new string[] {
                            "GET",
                            "r1b",
                            "R1b",
                            "Allow"});
#line 133
    testRunner.Given("the new ClaimsPermission has these rules", ((string)(null)), table32, "Given ");
#line hidden
#line 138
    testRunner.And("the new ClaimsPermission is POSTed to the createClaimPermissions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessType",
                            "ResourceUri",
                            "ResourceName",
                            "Permission"});
                table33.AddRow(new string[] {
                            string.Format("{0}", accessType),
                            string.Format("{0}", resourceUri),
                            string.Format("{0}", resourceName),
                            string.Format("{0}", permission)});
#line 139
    testRunner.When("these rules are removed via the updateClaimPermissionsResourceAccessRules endpoin" +
                        "t for the ClaimsPermission with id named \'id1\'", ((string)(null)), table33, "When ");
#line hidden
#line 142
    testRunner.Then("the HTTP status returned by the Claims service is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
