<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="$(EndjinProjectPropsPath)" Condition="$(EndjinProjectPropsPath) != ''" />

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <IsPackable>false</IsPackable>
    <RootNamespace>Marain.Claims.OpenApi.Specs</RootNamespace>
  </PropertyGroup>

  <PropertyGroup>
    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
    <RestoreLockedMode Condition="'$(ContinuousIntegrationBuild)' == 'true'">true</RestoreLockedMode>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      RCS1197 Optimize StringBuilder.AppendLine call
      Since this is a test project, we don't want minute performance optimizations to take precedence over readability.
      
      CS1591 - XML doc comments
      Not needed for most public features of test projects
    -->

    <NoWarn>$(NoWarn);RCS1197;CS1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Corvus.Testing.AzureFunctions.SpecFlow.NUnit" Version="1.5.1" />
    <PackageReference Include="Endjin.RecommendedPractices.GitHub" Version="2.1.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Marain.Services.Tenancy" Version="2.3.3" />
    <PackageReference Include="Marain.Services.Tenancy.Testing" Version="2.3.3" />
    <PackageReference Include="Marain.Tenancy.ClientTenantProvider" Version="2.0.5" />
    <PackageReference Include="Menes.Testing.AspNetCoreSelfHosting" Version="3.1.4" />
    <PackageReference Include="Microsoft.AspNetCore" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="[6.0.*,)" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Marain.Claims.Client.OpenApi\Marain.Claims.Client.OpenApi.csproj" />
    <ProjectReference Include="..\Marain.Claims.Client\Marain.Claims.Client.csproj" />
    <ProjectReference Include="..\Marain.Claims.Host.Functions\Marain.Claims.Host.Functions.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Update="appsettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="specflow.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="ServiceManifests\" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="..\Marain.Claims.Deployment\ServiceManifests\ClaimsServiceManifest.jsonc" Link="ServiceManifests\ClaimsServiceManifest.jsonc" />
  </ItemGroup>

  <!--
  To enable execution of feature files for each hosting mode, we exploit the fact that SpecFlow's
  NUnit integration generates partial classes. We modify these by adding a constructor and a test
  fixture source that causes the suite for certain features to run multiple times, once for each
  hosting type.
  We put our custom additions to these partial classes in files named FeatureName.feature.multi.cs.
  The following ItemGroup arranges for these to appear nested inside FeatureName.feature (just like
  the FeatureName.feature.cs files that SpecFlow generates).
  -->
  <ItemGroup>
    <Compile Update="**\*.feature.multi.cs">
      <DependentUpon>%(RelativeDir)$([System.String]::Copy('%(Filename)').Replace(".multi.cs", ""))</DependentUpon>
    </Compile>
  </ItemGroup>
</Project>